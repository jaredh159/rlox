#[derive(Debug, PartialEq)]
pub enum Token {
  LeftParen(usize),
  RightParen(usize),
  LeftBrace(usize),
  RightBrace(usize),
  Comma(usize),
  Dot(usize),
  Minus(usize),
  Plus(usize),
  Semicolon(usize),
  Slash(usize),
  Star(usize),
  Bang(usize),
  BangEqual(usize),
  Equal(usize),
  EqualEqual(usize),
  Greater(usize),
  GreaterEqual(usize),
  Less(usize),
  LessEqual(usize),
  Identifier(usize, String),
  String(usize, String),
  Number(usize, f64),
  And(usize),
  Class(usize),
  Else(usize),
  False(usize),
  Fun(usize),
  For(usize),
  If(usize),
  Nil(usize),
  Or(usize),
  Print(usize),
  Return(usize),
  Super(usize),
  This(usize),
  True(usize),
  Var(usize),
  While(usize),
  Eof(usize),
  Illegal(usize, String),
}

impl Token {
  pub fn lexeme(&self) -> &str {
    match self {
      Token::LeftParen(_) => "(",
      Token::RightParen(_) => ")",
      Token::LeftBrace(_) => "[",
      Token::RightBrace(_) => "]",
      Token::Comma(_) => ",",
      Token::Dot(_) => ".",
      Token::Minus(_) => "-",
      Token::Plus(_) => "+",
      Token::Semicolon(_) => ";",
      Token::Slash(_) => "/",
      Token::Star(_) => "*",
      Token::Bang(_) => "!",
      Token::BangEqual(_) => "!=",
      Token::Equal(_) => "=",
      Token::EqualEqual(_) => "==",
      Token::Greater(_) => ">",
      Token::GreaterEqual(_) => ">=",
      Token::Less(_) => "<",
      Token::LessEqual(_) => "<=",
      Token::Identifier(_, ident) => ident,
      Token::String(_, string) => string,
      Token::Number(_, _) => todo!("switch Token::Number to hold str, make eq, hash"),
      Token::And(_) => "and",
      Token::Class(_) => "class",
      Token::Else(_) => "else",
      Token::False(_) => "false",
      Token::Fun(_) => "fun",
      Token::For(_) => "for",
      Token::If(_) => "if",
      Token::Nil(_) => "nil",
      Token::Or(_) => "or",
      Token::Print(_) => "print",
      Token::Return(_) => "return",
      Token::Super(_) => "super",
      Token::This(_) => "this",
      Token::True(_) => "true",
      Token::Var(_) => "var",
      Token::While(_) => "while",
      Token::Eof(_) => "",
      Token::Illegal(_, illegal) => illegal,
    }
  }
}
